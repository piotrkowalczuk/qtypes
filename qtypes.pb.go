// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: qtypes.proto

package qtypes

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryType int32

const (
	QueryType_NULL             QueryType = 0
	QueryType_EQUAL            QueryType = 1
	QueryType_GREATER          QueryType = 2
	QueryType_GREATER_EQUAL    QueryType = 3
	QueryType_LESS             QueryType = 4
	QueryType_LESS_EQUAL       QueryType = 5
	QueryType_IN               QueryType = 6
	QueryType_BETWEEN          QueryType = 7
	QueryType_HAS_PREFIX       QueryType = 8
	QueryType_HAS_SUFFIX       QueryType = 9
	QueryType_SUBSTRING        QueryType = 10
	QueryType_PATTERN          QueryType = 11
	QueryType_MIN_LENGTH       QueryType = 12
	QueryType_MAX_LENGTH       QueryType = 13
	QueryType_OVERLAP          QueryType = 14
	QueryType_CONTAINS         QueryType = 15
	QueryType_IS_CONTAINED_BY  QueryType = 16
	QueryType_HAS_ELEMENT      QueryType = 17
	QueryType_HAS_ANY_ELEMENT  QueryType = 18
	QueryType_HAS_ALL_ELEMENTS QueryType = 19
)

// Enum value maps for QueryType.
var (
	QueryType_name = map[int32]string{
		0:  "NULL",
		1:  "EQUAL",
		2:  "GREATER",
		3:  "GREATER_EQUAL",
		4:  "LESS",
		5:  "LESS_EQUAL",
		6:  "IN",
		7:  "BETWEEN",
		8:  "HAS_PREFIX",
		9:  "HAS_SUFFIX",
		10: "SUBSTRING",
		11: "PATTERN",
		12: "MIN_LENGTH",
		13: "MAX_LENGTH",
		14: "OVERLAP",
		15: "CONTAINS",
		16: "IS_CONTAINED_BY",
		17: "HAS_ELEMENT",
		18: "HAS_ANY_ELEMENT",
		19: "HAS_ALL_ELEMENTS",
	}
	QueryType_value = map[string]int32{
		"NULL":             0,
		"EQUAL":            1,
		"GREATER":          2,
		"GREATER_EQUAL":    3,
		"LESS":             4,
		"LESS_EQUAL":       5,
		"IN":               6,
		"BETWEEN":          7,
		"HAS_PREFIX":       8,
		"HAS_SUFFIX":       9,
		"SUBSTRING":        10,
		"PATTERN":          11,
		"MIN_LENGTH":       12,
		"MAX_LENGTH":       13,
		"OVERLAP":          14,
		"CONTAINS":         15,
		"IS_CONTAINED_BY":  16,
		"HAS_ELEMENT":      17,
		"HAS_ANY_ELEMENT":  18,
		"HAS_ALL_ELEMENTS": 19,
	}
)

func (x QueryType) Enum() *QueryType {
	p := new(QueryType)
	*p = x
	return p
}

func (x QueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_qtypes_proto_enumTypes[0].Descriptor()
}

func (QueryType) Type() protoreflect.EnumType {
	return &file_qtypes_proto_enumTypes[0]
}

func (x QueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryType.Descriptor instead.
func (QueryType) EnumDescriptor() ([]byte, []int) {
	return file_qtypes_proto_rawDescGZIP(), []int{0}
}

// String ...
type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values      []string  `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	Valid       bool      `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
	Negation    bool      `protobuf:"varint,3,opt,name=negation,proto3" json:"negation,omitempty"`
	Type        QueryType `protobuf:"varint,4,opt,name=type,proto3,enum=qtypes.QueryType" json:"type,omitempty"`
	Insensitive bool      `protobuf:"varint,5,opt,name=insensitive,proto3" json:"insensitive,omitempty"`
}

func (x *String) Reset() {
	*x = String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qtypes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_qtypes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_qtypes_proto_rawDescGZIP(), []int{0}
}

func (x *String) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *String) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *String) GetNegation() bool {
	if x != nil {
		return x.Negation
	}
	return false
}

func (x *String) GetType() QueryType {
	if x != nil {
		return x.Type
	}
	return QueryType_NULL
}

func (x *String) GetInsensitive() bool {
	if x != nil {
		return x.Insensitive
	}
	return false
}

// Int64 ...
type Int64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values   []int64   `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	Valid    bool      `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
	Negation bool      `protobuf:"varint,3,opt,name=negation,proto3" json:"negation,omitempty"`
	Type     QueryType `protobuf:"varint,4,opt,name=type,proto3,enum=qtypes.QueryType" json:"type,omitempty"`
}

func (x *Int64) Reset() {
	*x = Int64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qtypes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64) ProtoMessage() {}

func (x *Int64) ProtoReflect() protoreflect.Message {
	mi := &file_qtypes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64.ProtoReflect.Descriptor instead.
func (*Int64) Descriptor() ([]byte, []int) {
	return file_qtypes_proto_rawDescGZIP(), []int{1}
}

func (x *Int64) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Int64) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *Int64) GetNegation() bool {
	if x != nil {
		return x.Negation
	}
	return false
}

func (x *Int64) GetType() QueryType {
	if x != nil {
		return x.Type
	}
	return QueryType_NULL
}

// Uint64 ...
type Uint64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values   []uint64  `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	Valid    bool      `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
	Negation bool      `protobuf:"varint,3,opt,name=negation,proto3" json:"negation,omitempty"`
	Type     QueryType `protobuf:"varint,4,opt,name=type,proto3,enum=qtypes.QueryType" json:"type,omitempty"`
}

func (x *Uint64) Reset() {
	*x = Uint64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qtypes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint64) ProtoMessage() {}

func (x *Uint64) ProtoReflect() protoreflect.Message {
	mi := &file_qtypes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint64.ProtoReflect.Descriptor instead.
func (*Uint64) Descriptor() ([]byte, []int) {
	return file_qtypes_proto_rawDescGZIP(), []int{2}
}

func (x *Uint64) GetValues() []uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Uint64) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *Uint64) GetNegation() bool {
	if x != nil {
		return x.Negation
	}
	return false
}

func (x *Uint64) GetType() QueryType {
	if x != nil {
		return x.Type
	}
	return QueryType_NULL
}

// Float64 ...
type Float64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values   []float64 `protobuf:"fixed64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	Valid    bool      `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
	Negation bool      `protobuf:"varint,3,opt,name=negation,proto3" json:"negation,omitempty"`
	Type     QueryType `protobuf:"varint,4,opt,name=type,proto3,enum=qtypes.QueryType" json:"type,omitempty"`
}

func (x *Float64) Reset() {
	*x = Float64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qtypes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Float64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Float64) ProtoMessage() {}

func (x *Float64) ProtoReflect() protoreflect.Message {
	mi := &file_qtypes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Float64.ProtoReflect.Descriptor instead.
func (*Float64) Descriptor() ([]byte, []int) {
	return file_qtypes_proto_rawDescGZIP(), []int{3}
}

func (x *Float64) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Float64) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *Float64) GetNegation() bool {
	if x != nil {
		return x.Negation
	}
	return false
}

func (x *Float64) GetType() QueryType {
	if x != nil {
		return x.Type
	}
	return QueryType_NULL
}

// Timestamp ...
type Timestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values   []*timestamppb.Timestamp `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	Valid    bool                     `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"`
	Negation bool                     `protobuf:"varint,3,opt,name=negation,proto3" json:"negation,omitempty"`
	Type     QueryType                `protobuf:"varint,4,opt,name=type,proto3,enum=qtypes.QueryType" json:"type,omitempty"`
}

func (x *Timestamp) Reset() {
	*x = Timestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_qtypes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timestamp) ProtoMessage() {}

func (x *Timestamp) ProtoReflect() protoreflect.Message {
	mi := &file_qtypes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timestamp.ProtoReflect.Descriptor instead.
func (*Timestamp) Descriptor() ([]byte, []int) {
	return file_qtypes_proto_rawDescGZIP(), []int{4}
}

func (x *Timestamp) GetValues() []*timestamppb.Timestamp {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Timestamp) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *Timestamp) GetNegation() bool {
	if x != nil {
		return x.Negation
	}
	return false
}

func (x *Timestamp) GetType() QueryType {
	if x != nil {
		return x.Type
	}
	return QueryType_NULL
}

var File_qtypes_proto protoreflect.FileDescriptor

var file_qtypes_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x71, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x71, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x22, 0x78, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x79, 0x0a, 0x06, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x7a, 0x0a, 0x07, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x71, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x71, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x2a, 0xb7, 0x02, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x06,
	0x0a, 0x02, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45,
	0x4e, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x41, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49,
	0x58, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x41, 0x53, 0x5f, 0x53, 0x55, 0x46, 0x46, 0x49,
	0x58, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x10, 0x0b, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x49, 0x4e, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x0c, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x58, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x10, 0x0d, 0x12,
	0x0b, 0x0a, 0x07, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x50, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x10, 0x12,
	0x0f, 0x0a, 0x0b, 0x48, 0x41, 0x53, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x11,
	0x12, 0x13, 0x0a, 0x0f, 0x48, 0x41, 0x53, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x45, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x53, 0x5f, 0x41, 0x4c, 0x4c,
	0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x13, 0x42, 0x22, 0x5a, 0x20, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x6f, 0x74, 0x72, 0x6b,
	0x6f, 0x77, 0x61, 0x6c, 0x63, 0x7a, 0x75, 0x6b, 0x2f, 0x71, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_qtypes_proto_rawDescOnce sync.Once
	file_qtypes_proto_rawDescData = file_qtypes_proto_rawDesc
)

func file_qtypes_proto_rawDescGZIP() []byte {
	file_qtypes_proto_rawDescOnce.Do(func() {
		file_qtypes_proto_rawDescData = protoimpl.X.CompressGZIP(file_qtypes_proto_rawDescData)
	})
	return file_qtypes_proto_rawDescData
}

var file_qtypes_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_qtypes_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_qtypes_proto_goTypes = []any{
	(QueryType)(0),                // 0: qtypes.QueryType
	(*String)(nil),                // 1: qtypes.String
	(*Int64)(nil),                 // 2: qtypes.Int64
	(*Uint64)(nil),                // 3: qtypes.Uint64
	(*Float64)(nil),               // 4: qtypes.Float64
	(*Timestamp)(nil),             // 5: qtypes.Timestamp
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_qtypes_proto_depIdxs = []int32{
	0, // 0: qtypes.String.type:type_name -> qtypes.QueryType
	0, // 1: qtypes.Int64.type:type_name -> qtypes.QueryType
	0, // 2: qtypes.Uint64.type:type_name -> qtypes.QueryType
	0, // 3: qtypes.Float64.type:type_name -> qtypes.QueryType
	6, // 4: qtypes.Timestamp.values:type_name -> google.protobuf.Timestamp
	0, // 5: qtypes.Timestamp.type:type_name -> qtypes.QueryType
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_qtypes_proto_init() }
func file_qtypes_proto_init() {
	if File_qtypes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_qtypes_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qtypes_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Int64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qtypes_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Uint64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qtypes_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Float64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_qtypes_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Timestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_qtypes_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_qtypes_proto_goTypes,
		DependencyIndexes: file_qtypes_proto_depIdxs,
		EnumInfos:         file_qtypes_proto_enumTypes,
		MessageInfos:      file_qtypes_proto_msgTypes,
	}.Build()
	File_qtypes_proto = out.File
	file_qtypes_proto_rawDesc = nil
	file_qtypes_proto_goTypes = nil
	file_qtypes_proto_depIdxs = nil
}
